#
### sightly call function
#
<template data-sly-template.foo><section>Template</section></template>
<div data-sly-call="${foo}"></div>
===

<div><section>Template</section></div>
#
### sightly call function with empty attribute value
#
<template data-sly-template.foo=""><section>Template</section></template>
<div data-sly-call="${foo}"></div>
===

<div><section>Template</section></div>
#
### sightly call function with parameter
#
<template data-sly-template.foo="${ @ param }"><section>${param}</section></template>
<div data-sly-call="${foo @ param='Template' }"></div>
===

<div><section>Template</section></div>
^^^
34:     $.dom.append($n, var_0);
47:     yield $.call($.template().foo, [$n, {"param": "Template", }]);
#
### sightly call function with colon in name
#
<template data-sly-template.foo:bar="${ @ param }"><section>${param}</section></template>
<div data-sly-call="${foo:bar @ param='Template' }"></div>
===

<div><section>Template</section></div>
#
### sightly call function with parameter with colon
#
<template data-sly-template.foo="${ @ jcr:title }"><section>${jcr:title}</section></template>
<div data-sly-call="${foo @ jcr:title='Template' }"></div>
===

<div><section>Template</section></div>
#
### sightly call function with missing parameter
#
<template data-sly-template.foo="${ @ param='Missing parameter' }"><section>${param}</section></template>
<div data-sly-call="${foo}"></div>
===

<div><section></section></div>
^^^
34:     $.dom.append($n, var_0);
47:     yield $.call($.template().foo, [$n, {}]);
#
### sightly call function can be redeclared
#
<template data-sly-template.foo="${ @ param }"><section>Template 1</section></template>
<template data-sly-template.foo="${ @ param }"><section>Template 2</section></template>
<div data-sly-call="${foo}"></div>
===


<div><section>Template 2</section></div>
#
### sightly call function in any order
#
<div data-sly-call="${foo}"></div>
<template data-sly-template.foo="${ @ param }"><section>Template</section></template>
===
<div><section>Template</section></div>

#
### sightly call function receives correct scope
#
<sly data-sly-test.param="${'xyz'}"></sly>
<div data-sly-call="${foo}"></div>
<template data-sly-template.foo="${ @ param }"><section>${param}</section></template>
===

<div><section></section></div>

^^^
34:     $.dom.append($n, var_0);
50:     yield $.call($.template().foo, [$n, {}]);
#
### sightly call function can call other templates
#
<template data-sly-template.foo="${@ a}">
    <!-- calling bar -->
    <div data-sly-call="${bar @ a=a}"></div>
</template>

<template data-sly-template.bar="${@ a}">
    <!-- this is bar -->
    <section>${a}</section>
</template>

<div data-sly-call="${foo @ a=123}"></div>
===
<div>
    <!-- calling bar -->
    <div>
    <!-- this is bar -->
    <section>123</section>
</div>
</div>
^^^
36:     yield $.call($.template().bar, [$n, {"a": a, }]);
49:     $.dom.append($n, var_0);
64:     yield $.call($.template().foo, [$n, {"a": 123, }]);
#
### sightly call function can call itself recursively
#
<template data-sly-template.foo="${@ pages}">
<ul data-sly-list="${pages}">
<li><span>${item.title}</span><sly data-sly-call="${foo @ pages=item.pages}"></sly></li>
</ul>
</template>
<sly data-sly-use.bar="${'./call_spec/recursion_test.js'}" data-sly-call="${foo @ pages=bar.pages}"></sly>
===


<ul>
<li><span>Page A</span>
<ul>
<li><span>Page 1</span>

</li>

<li><span>Page 2</span>

</li>

<li><span>Page 3</span>

</li>
</ul>
</li>

<li><span>Page B</span>
<ul>
<li><span>Page 1</span>

</li>

<li><span>Page 2</span>

</li>
</ul>
</li>

<li><span>Page C</span>
<ul>
<li><span>Page 1</span>

</li>

<li><span>Page 2</span>

</li>

<li><span>Page 3</span>

</li>

<li><span>Page 4</span>

</li>
</ul>
</li>
</ul>

^^^
34:     if (var_size1) {
46:         $.dom.append($n, var_3);
48:         yield $.call($.template().foo, [$n, {"pages": item["pages"], }]);
67:     yield $.call($.template().foo, [$n, {"pages": bar["pages"], }]);
#
###
