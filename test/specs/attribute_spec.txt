#
### add single attribute
#
<div data-sly-attribute.data-values="${properties.myValues}"></div>
---
out("<div");
{ const var_attrValue_data_values0 = properties["myValues"];
  { const var_attrValueEscaped_data_values1 = xss(var_attrValue_data_values0, "attribute", "data-values");
    if ((var_attrValueEscaped_data_values1) || (("false") == (var_attrValue_data_values0))) {
      out(" data-values");
      if ((var_attrValue_data_values0) !== (true)) {
        out("=\"");
        out(var_attrValueEscaped_data_values1);
        out("\"");
      }
    }
  }
}
out("></div>\n");
===
<div data-values="some data value"></div>
^^^
    if ((var_attrValueEscaped_data_values1) || (("false") == (var_attrValue_data_values0))) {
#
### replace single attribute
#
<div title="" class="className" data-sly-attribute.class="${properties.myClass}"/>
===
<div title="" class="super-green"/>
^^^
    if ((var_attrValueEscaped_class1) || (("false") == (var_attrValue_class0))) {
#
### replace single attribute after call must not work.
#
<div data-sly-attribute.class="${properties.myClass}" class="className"/>
===
<div class="className"/>
#
### remove single attribute
#
<div title="" class="className" data-sly-attribute.class="${false}"/>
===
<div title=""/>
^^^
    if ((var_attrValueEscaped_class1) || (("false") == (var_attrValue_class0))) {
#
### ignore dangerous attributes
#
<div title="" onMouseMove="javascript:alert()" data-sly-attribute.onMouseMove="${'system.exit()'}"/>
===
<div title="" onMouseMove="javascript:alert()"/>
#
### create / replace / delete multiple arguments
#
<input class="green" lang="en" data-sly-attribute="${foobar}" type="text" />
---
out("<input");
{ const var_attrMap0 = foobar;
  { const var_attrName_class1 = "class";
    { const var_mapContains_class2 = var_attrMap0["class"];
      { const var_attrContentEscaped3 = xss(var_mapContains_class2, "attribute", var_attrName_class1);
        if ((var_attrContentEscaped3) || (("false") == (var_mapContains_class2))) {
          out(" ");
          out(var_attrName_class1);
          if ((var_mapContains_class2) !== (true)) {
            out("=\"");
            out(var_attrContentEscaped3);
            out("\"");
          }
        }
      }
      if ((var_mapContains_class2) == (null)) {
        out(" class=\"green\"");
      }
    }
  }
  { const var_attrName_lang4 = "lang";
    { const var_mapContains_lang5 = var_attrMap0["lang"];
      { const var_attrContentEscaped6 = xss(var_mapContains_lang5, "attribute", var_attrName_lang4);
        if ((var_attrContentEscaped6) || (("false") == (var_mapContains_lang5))) {
          out(" ");
          out(var_attrName_lang4);
          if ((var_mapContains_lang5) !== (true)) {
            out("=\"");
            out(var_attrContentEscaped6);
            out("\"");
          }
        }
      }
      if ((var_mapContains_lang5) == (null)) {
        out(" lang=\"en\"");
      }
    }
  }
  out(" type=\"text\"");
  { const var_ignoredAttributes7 = {"class": true, "lang": true, "type": true, };
    for ((var_attrIndex10,var_attrName8) in var_attrMap0) {
      { const var_attrNameEscaped9 = xss(var_attrName8, "attributeName");
        if (var_attrNameEscaped9) {
          if (!var_ignoredAttributes7[var_attrName8]) {
            { const var_attrContent11 = var_attrMap0[var_attrName8];
              { const var_attrContentEscaped12 = xss(var_attrContent11, "attribute", var_attrNameEscaped9);
                if ((var_attrContentEscaped12) || (("false") == (var_attrContent11))) {
                  out(" ");
                  out(var_attrNameEscaped9);
                  if ((var_attrContent11) !== (true)) {
                    out("=\"");
                    out(var_attrContentEscaped12);
                    out("\"");
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
out("/>\n");
===
<input class="bar" type="text" id="foo"/>
^^^
    if ((var_attrContentEscaped3) || (("false") == (var_mapContains_class2))) {
#
### left to right
#
<div class="bar1" data-sly-attribute.class="bar2" data-sly-attribute="${foobar}"></div>
<div data-sly-attribute="${foobar}" data-sly-attribute.class="bar2" id="foo2"></div>
===
<div class="bar" id="foo"></div>
<div id="foo2" class="bar2"></div>
^^^
    if ((var_attrValueEscaped_class1) || (("false") == (var_attrValue_class0))) {
          if ((var_attrContentEscaped20) || (("false") == (var_attrContent19))) {
#
### Empty string values lead to the removal of the attribute:
#
<div lang="${''}"></div>
<div lang="en" data-sly-attribute.lang></div>
<div lang="en" data-sly-attribute.lang=""></div>
<div lang="en" data-sly-attribute.lang="${''}"></div>
<div lang="en" data-sly-attribute="${foobar}"></div>
===
<div></div>
<div></div>
<div></div>
<div></div>
<div id="foo" class="bar"></div>
^^^
    if ((var_attrContent1) || (("false") == (var_attrValue0))) {
    if ((var_attrValueEscaped_lang3) || (("false") == (var_attrValue_lang2))) {
    if ((var_attrValueEscaped_lang5) || (("false") == (var_attrValue_lang4))) {
    if ((var_attrValueEscaped_lang7) || (("false") == (var_attrValue_lang6))) {
    if ((var_attrContentEscaped11) || (("false") == (var_mapContains_lang10))) {
#
### empty attributes are left as they are if no data-sly-attribute applies to them
#
<div title="" data-sly-attribute="${foobar}"></div>
===
<div title="" id="foo" class="bar"></div>
^^^
    if ((var_attrContentEscaped3) || (("false") == (var_mapContains_title2))) {
#
### Boolean values allow to control the display of boolean attributes:
#
<input checked="${true}"/>
<input data-sly-attribute.checked="${true}"/>
<input checked="${false}"/>
<input data-sly-attribute.checked="${false}"/>
<input checked="${'true'}"/>
<input checked="${'false'}"/>
<input data-sly-attribute="${attrs}"/>
===
<input checked/>
<input checked/>
<input/>
<input/>
<input checked="true"/>
<input checked="false"/>
<input checked/>
^^^
    if ((var_attrContent1) || (("false") == (var_attrValue0))) {
    if ((var_attrValueEscaped_checked3) || (("false") == (var_attrValue_checked2))) {
    if ((var_attrContent5) || (("false") == (var_attrValue4))) {
    if ((var_attrValueEscaped_checked7) || (("false") == (var_attrValue_checked6))) {
    if ((var_attrContent9) || (("false") == (var_attrValue8))) {
    if ((var_attrContent11) || (("false") == (var_attrValue10))) {
          if ((var_attrContentEscaped18) || (("false") == (var_attrContent17))) {
#
### Arrays are cast to strings:
#
<div title="${['one', 'two', 'three']}"></div>
<div title="${[]}"></div>
===
<div title="one,two,three"></div>
<div></div>
^^^
    if ((var_attrContent1) || (("false") == (var_attrValue0))) {
    if ((var_attrContent3) || (("false") == (var_attrValue2))) {
#
### Numbers are cast to strings (i.e. zero doesn't remove the attribute):
#
<div class="${0}"></div>
===
<div class="0"></div>
^^^
    if ((var_attrContent1) || (("false") == (var_attrValue0))) {
#
### Quotes are escaped
#
<div class='"foo" "bar"'></div>
===
<div class='&quot;foo&quot; &quot;bar&quot;'></div>
#
### Quotes are escaped in variables
#
<div class="${quotes}"></div>
===
<div class="Hello, &quot;World&#x21;&quot;"></div>
^^^
    if ((var_attrContent1) || (("false") == (var_attrValue0))) {
#
###
